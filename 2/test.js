// Generated by CoffeeScript 1.4.0
(function() {
  var Controller, WSLogger, line_length;

  line_length = function(start, end) {
    return Math.sqrt(Math.pow(start[0] - end[0], 2.0) + Math.pow(start[1] - end[1], 2.0));
  };

  WSLogger = (function() {

    function WSLogger(url) {
      this.url = url;
      this.connect();
      this.queue = [];
      this.is_connected = false;
    }

    WSLogger.prototype.connected = function() {
      return this.is_connected;
    };

    WSLogger.prototype.connect = function() {
      var _this = this;
      this.socket = new WebSocket(this.url);
      this.socket.onopen = function(event) {
        var obj, _i, _len, _ref;
        _this.is_connected = true;
        console.log("Logger connected");
        _ref = _this.queue;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          obj = _ref[_i];
          _this.socket.send(JSON.stringify(obj));
        }
        return _this.queue = [];
      };
      this.socket.onerror = function(event) {
        console.log("websocket error: " + event);
        return _this.socket.onclose(event);
      };
      return this.socket.onclose = function(event) {
        var retry;
        _this.is_connected = false;
        _this.socket.close();
        retry = function() {
          return _this.connect();
        };
        return setTimeout(retry, 1000);
      };
    };

    WSLogger.prototype.log = function(obj) {
      console.log(obj);
      if (!this.connected()) {
        console.log("Not connected");
        return this.queue.push(obj);
      } else {
        return this.socket.send(JSON.stringify(obj));
      }
    };

    return WSLogger;

  })();

  Controller = (function() {

    function Controller(element) {
      var cancel,
        _this = this;
      this.element = element;
      this.logger = new WSLogger("ws://10.0.0.3:8081/");
      cancel = function(e) {
        e.preventDefault();
        e.cancelBubble = true;
        e.returnValue = false;
        e.stopPropagation();
        _this.log("Cancelling " + e.constructor.toString());
        return false;
      };
      $("#controller").bind("touchmove", false);
      this.canvas = d3.select(this.element).append("svg").node();
      d3.select(this.canvas).attr("id", "canvasthing").on("touchstart", function() {
        return _this.touchstart();
      }).on("touchmove", function() {
        return _this.touchmove();
      }).append("circle").attr("cx", "30").attr("cy", "30").attr("r", 50).attr("id", "finger");
      this.log("ready");
    }

    Controller.prototype.touchstart = function() {
      var touches;
      touches = d3.touches(this.canvas);
      d3.select(this.canvas).select("#finger").attr("cx", touches[0][0]).attr("cy", touches[0][1]);
      return this.lastf1 = touches[0];
    };

    Controller.prototype.touchmove = function() {
      var distance, f1, touches;
      touches = d3.touches(this.canvas);
      f1 = touches[0];
      distance = line_length(f1, this.lastf1);
      d3.select(this.canvas).select("#finger").attr("cx", touches[0][0]).attr("cy", touches[0][1]);
      this.log("Distance: " + distance + " ---> " + f1 + " <=> " + this.lastf1);
      return this.lastf1 = f1;
    };

    Controller.prototype.click = function(event) {
      return this.logger.log("CLICK");
    };

    Controller.prototype.log = function(obj) {
      return this.logger.log(obj);
    };

    return Controller;

  })();

  window.addEventListener("load", function() {
    return new Controller(document.querySelector("#controller"));
  });

}).call(this);
